/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Transactions {
  export type TransferStructStruct = {
    sender: AddressLike;
    receiver: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type TransferStructStructOutput = [
    sender: string,
    receiver: string,
    amount: bigint,
    timestamp: bigint
  ] & { sender: string; receiver: string; amount: bigint; timestamp: bigint };
}

export interface TransactionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTransactionsCount"
      | "getTransactionsPageAndTotalPages"
      | "transferAndRecord"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTransactionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsPageAndTotalPages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndRecord",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransactionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsPageAndTotalPages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndRecord",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    receiver: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    receiver: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Transactions extends BaseContract {
  connect(runner?: ContractRunner | null): Transactions;
  waitForDeployment(): Promise<this>;

  interface: TransactionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTransactionsCount: TypedContractMethod<[], [bigint], "view">;

  getTransactionsPageAndTotalPages: TypedContractMethod<
    [startIndex: BigNumberish, pageSize: BigNumberish],
    [
      [Transactions.TransferStructStructOutput[], bigint] & {
        totalPages: bigint;
      }
    ],
    "view"
  >;

  transferAndRecord: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTransactionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransactionsPageAndTotalPages"
  ): TypedContractMethod<
    [startIndex: BigNumberish, pageSize: BigNumberish],
    [
      [Transactions.TransferStructStructOutput[], bigint] & {
        totalPages: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferAndRecord"
  ): TypedContractMethod<[receiver: AddressLike], [void], "payable">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
